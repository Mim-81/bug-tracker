name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests-backend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-backend.outputs.report }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Execute Backend Unit tests
        id: test-backend
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out > coverage.txt

          echo "## Go Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat coverage.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          go test -v ./... 2>&1 | go-junit-report > test-results.xml

      - name: Publish Backend Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Backend Unit Tests Report
          path: bugtracker-backend/test-results.xml
          reporter: java-junit   # <-- changed

  unit-tests-frontend:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test-frontend.outputs.report }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: bugtracker-frontend/package-lock.json

      - name: Execute Frontend Unit tests
        id: test-frontend
        working-directory: ./bugtracker-frontend
        run: |
          npm ci
          npm test | tee full_output.txt

          echo "## Frontend Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat full_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat full_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish Frontend Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: frontend Unit Tests Report 
          path: bugtracker-frontend/test-results.xml
          reporter: java-junit   # <-- changed

  create-coverage-comment:
    if: github.event_name == 'pull_request'
    needs: [unit-tests-backend, unit-tests-frontend]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Create Backend Coverage Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Backend Test Coverage Report
            ```
            ${{ needs.unit-tests-backend.outputs.coverage }}
            ```
      - name: Create Frontend Coverage Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Frontend Test Coverage Report
            ```
            ${{ needs.unit-tests-frontend.outputs.coverage }}
            ```

  api-e2e-perf-tests:
    needs: [unit-tests-backend, unit-tests-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Launch Application
        run: |
          docker compose up --build -d
          npx -y wait-on http://localhost:8080/api/health -t 30000

      # ---------- API tests ----------
      - name: Run API Tests
        working-directory: ./tests-api
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:8080
        run: |
          npm ci
          npx playwright install --with-deps
          npx playwright test \
            --reporter=junit,html \
            --reporter-options junit.outputFile=test-results/results.xml,html.outputFolder=playwright-report

      # ---------- E2E tests ----------
      - name: Run E2E Tests
        working-directory: ./tests-e2e
        env:
          CI: "1"
        run: |
          npm ci
          npx playwright install --with-deps
          npx playwright test \
            --reporter=junit,html \
            --reporter-options junit.outputFile=test-results/results.xml,html.outputFolder=playwright-report

      # ---------- Performance (k6) ----------
      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Run Performance Test
        run: |
          k6 run --out json=tests-perf/summary.json tests-perf/script.js

      - name: Shut Down Application
        if: always()
        run: docker compose down

      - name: List produced files (debug)
        if: always()
        run: |
          echo "== tests-api ==" && ls -R tests-api || true
          echo "== tests-e2e ==" && ls -R tests-e2e || true
          echo "== tests-perf ==" && ls -R tests-perf || true

      # ---------- Upload artifacts ----------
      - name: Upload API Test Results (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: ./tests-api/test-results/results.xml
          retention-days: 30

      - name: Upload API Test HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-playwright-report
          path: ./tests-api/playwright-report
          retention-days: 30

      - name: Upload E2E Test Results (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: ./tests-e2e/test-results/results.xml
          retention-days: 30

      - name: Upload E2E Test HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-playwright-report
          path: ./tests-e2e/playwright-report
          retention-days: 30

      - name: Upload Performance Raw JSON
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-raw-results
          path: ./tests-perf/summary.json
          retention-days: 30

      - name: Upload Performance HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: ./tests-perf/perf-results.html
          retention-days: 30

      # ---------- Publish checks ----------
      - name: Publish API Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: API Tests Report
          path: ./tests-api/test-results/results.xml
          reporter: java-junit   # <-- changed

      - name: Publish E2E Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: E2E Tests Report
          path: ./tests-e2e/test-results/results.xml
          reporter: java-junit   # <-- changed
